# #################################################################################################
# - Name Space Definitions -----------------------------------------------------------------------/
# #################################################################################################
---
apiVersion: v1
kind: Namespace
metadata:
  name: profile-site
# #################################################################################################
# - Deployment Definitions -----------------------------------------------------------------------/
# #################################################################################################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
  namespace: profile-site
  labels:
    app: front-end
spec:
  replicas: 1
  selector:
    matchLabels:
      app: front-end
  template:
    metadata:
      labels:
        app: front-end
    spec:
      containers:
      - name: front-end-container
        image: {{.Values.frontimage}}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
        livenessProbe:
          exec:
            command:
              - curl
              - --fail
              - http://localhost:3000/health
      # Configure probe parameters (optional)
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
      # Define the probe command
          exec:
            command:
              - curl
              - --fail
              - http://localhost:3000/ready
          # Configure probe parameters (optional)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: 250Mi
            cpu: 100m
          limits:
            memory: 250Mi
            cpu: 300m
      imagePullSecrets:
      - name: secret-tiger-docker
      nodeSelector:
        node-group: group1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-backend
  namespace: profile-site
  labels:
    app: back-end
spec:
  replicas: 1
  selector:
    matchLabels:
      app: back-end
  template:
    metadata:
      labels:
        app: back-end
    spec:
      initContainers:
        - name: wait-for-db
          image: alpine
          command:
            - sh
            - -c
            - |
              apk add --no-cache netcat-openbsd && \
              until nc -z {{ .Values.back_end }} 5432; do
              echo waiting for service;
              sleep 2;
              done;
      containers:
      - name: back-end-container
        image: {{.Values.backimage}}
        imagePullPolicy: Always
        # volumeMounts:
        # - mountPath: "/usr/src/app/s3"
        #   name: s3-storage
        ports:
        - name: http
          containerPort: 9000
        livenessProbe:
          exec:
            command:
              - curl
              - --fail
              - http://localhost:9000/health
      # Configure probe parameters (optional)
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
      # Define the probe command
          exec:
            command:
              - curl
              - --fail
              - http://localhost:9000/ready
          # Configure probe parameters (optional)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: 250Mi
            cpu: 100m
          limits:
            memory: 250Mi
            cpu: 300m
      imagePullSecrets:
      - name: secret-tiger-docker
      nodeSelector:
        node-group: group1
  # volumes:
  #   - name: s3-storage
  #     persistentVolumeClaim:
  #       claimName: s3-pvc"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-db
  namespace: profile-site
  labels:
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db-container
        image: {{.Values.pgimage}}
        imagePullPolicy: Always
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: 500Mi
            cpu: 100m
          limits:
            memory: 500Mi
            cpu: 300m
      imagePullSecrets:
      - name: secret-tiger-docker
      nodeSelector:
        node-group: master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: profile-site
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: monitoring-service-account
      containers:
        - name: prometheus
          image: prom/prometheus:latest  # Use the latest version
          ports:
            - containerPort: 9090
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus/'
            - "--web.listen-address=:9090"
            - "--web.external-url=https://prometheus.shahsportfolio.online"
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus/
            - name: storage-volume
              mountPath: /prometheus/
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
        - name: storage-volume
          emptyDir: {}
      nodeSelector:
        node-group: group2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
  namespace: profile-site
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-state-metrics
  template:
    metadata:
      labels:
        app: kube-state-metrics
    spec:
      containers:
        - name: kube-state-metrics
          image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
          ports:
            - name: http
              containerPort: 8080
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
      nodeSelector:
        node-group: group2
# #################################################################################################
# - Config Maps ----------------------------------------------------------------------------------/
# #################################################################################################
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: profile-site
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s  # Default scrape interval

      # Scraping Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - source_labels: [__meta_kubernetes_node_name]
            action: replace
            target_label: instance

      # Scraping Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            action: keep
            regex: profile-site  # Adjust to your target namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: instance

      # Optional: Scraping the Kubernetes API server for additional metrics
      - job_name: 'kubernetes-apiserver'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: kubernetes
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-services
  namespace: ingress-nginx
data:
  5432: "profile-site/db-service:5432"
# #################################################################################################
# - Service Definitions --------------------------------------------------------------------------/
# #################################################################################################
---
apiVersion: v1
kind: Service
metadata:
  name: kube-state-metrics
  namespace: profile-site
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: kube-state-metrics
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: profile-site
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
---
apiVersion: v1
kind: Service
metadata:
  name: db-service
  namespace: profile-site
spec:
  selector:
    app: db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: front-end-service
  namespace: profile-site
spec:
  selector:
    app: front-end
  ports:
  - protocol: TCP
    port: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: back-end-service
  namespace: profile-site
spec:
  selector:
    app: back-end
  ports:
  - protocol: TCP
    port: 9000
# #################################################################################################